Gerald is a learning project to get me back up and running with coding, since I
have not programmed anything worthwhile in more than 10 years.
Gerald's name was suggested by Akerlie.

Gerald will:


1- Connect to twitch with a secondary account
2- sit in channel(s) and parse what people say.
3- It will count emotes used per user.
4- It will keep count of the favourite emote per user
5- It will keep count of the top 10 emotes used in the channel.


To do this, the following is needed to learn:


1- Find out how to connet to twitch's irc (already done)
2- Find out how to detect emotes (already done)
3- Relearn how to deal with databases (totally forgot how), learn an orm (most
probably gorm)
4- Learn how to structure the go project, I have seen a standard floating
around, but unsure how to structure gorm models/functions yet.
5- start with sqlite for ease then use a proper db later.


Random points:

1- Dockerised!
2- Log output for log aggregation (stdout)
3- idiomatic 
4- Load balancing
5- Kubernetes? (yes overkill, but the point is to learn)


yeah enough... good start...


Questions? Remarks?

1 - I wonder if I should structure it as a MVC project?
2 - keep an eye on :  golang-migrate /
migrate
3 - I have no idea what I am doing...
4 - Gempir lib is incomplete, missing User fields, maybe more. So either help
Gempir, or create a layer now to deal with it...or just scrap the extra info
needed?? but then I would have to re populate the db with the missing info at
one point... hmmm...which can be done upon user join... 
okie... it is decided...skip some fields for now...
5 - This project might be a bit bigger than I expected it to be as a learning
project... weeeeee... 
6 - mini http/rest lib? maybe... 
7 - service package as an aggregator for twitchirc and twitchapi? something to
ponder 
8 - 





TODO:

1-Tmux is not configured on this pc! blasphemy! (this has been done for a
while)...I wonder if nvim supports strike text...



DB Notes:
(probably should dust up my uml skills...)
1 - user N:N emote
2 - user N:N channel
3 - users have multiple roles in channel: broadcaster, mod, viewer(vip,normal)
4 - users have multiple types/roles globally(find out what):staff , ...
(I wonder if instead of string as type/role I should have a limited list of
existing roles, or just keep it open for future expandibility? who knows what
are the best practices...
5 - 

--new db brainstorming...
the above no longer applies...I think...maybe I will return to it at one point
or maybe I will just make my life easier for the time being, keep everything as
is and continue with other implementation until I really need to develop the db
properly.
...okie that;s what I will do... why do things today if I can postpone them
till tomorrow :P


Further Ideas:

1 - Apex api: get current amount of kills from tracker and legend. 
2 - Bot becomes modular with plugins, core funtionality is minimal with a web
interface. I need my brother for this.
3 - Find a way for twitch bot to general and consume channel points!
 

First Attempt at something working...
- connect to irc, wait for user to say a line with an emote, create user and
  slap the emote in the db. able to see it with an sqlite viewer...


so in the mood to dump this and go play apex...but...must...resist...!
---------------------------------------------------------------------------------
Change of plans!!!

I figured out yesterday that some of my assumptions were stupid. Emotes change!
Streamers delete, replace, update, bring back emotes all the time, and
sometimes just seasonally! like halloween emotes, or xmas emotes.
So there should be a mechanism that checks at the start of each stream what is
the complete emotes set that the streamer has and then act on that.
Would be nice to keep it in memory, at least the emote id, or else it would
need to check the api with every single emote written in chat? that's not a
good design! Also I believe the api has a limit, imagine doing that for several
hundred channels!
so....
Today will start by trying to connect with the twitch api instead of just
twitch irc, will try to implement it on my own , this will teach me a bit more
than just finding a library that does it for me, which apparently is frowned
upon in the Go community... no idea why . I should probably read about their
mindset.

k... letsee gooo...
---------------------------------------------------------------------------------
I have the bad habbit to look way ahead of what I am doing, which handicaps me
and stop me from progressing with what ever I am doing. I am now thinking about
a problem that I should not be thinking about for another couple of weeks...
devops brain must be reduced a bit with coding... it is iterative...
--------------------------------------------------------------------------------
i love streaming to bots... yay...
-------------------------------------------------------------------------------
Hmm on days where I can't code maybe I should build a pipeline? gitlab pipeline
would be nice? haven't touched gitlab cicd , maybe an good oppurtinity...
okie...leet's at least create a gitlab repo...
--------------------------------------------------------------------------------i
Roadmap:

0.0.0: Prototype to experiment with concepts, goroutines, channels, redis,etc.
0.1.0: Emotes counter 
0.2.0: Multiple channels support
0.3.0:
0.4.0:
0.5.0:
0.6.0:
0.7.0:
0.8.0:
0.9.0:
0.9.9:
